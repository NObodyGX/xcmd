from .base import Header, Mp4Box
from .iso import (
    ElngBox,
    FrmaBox,
    FtypBox,
    IlocBox,
    IproBox,
    IrefBox,
    MecoBox,
    MereBox,
    MetaBox,
    MinfBox,
    MoovBox,
    MvhdBox,
    PdinBox,
    PitmBox,
    RinfBox,
    SchmBox,
    SidxBox,
    SinfBox,
    SsixBox,
    StrdBox,
    StriBox,
    StrkBox,
    StypBox,
    TrakBox,
    TkhdBox,
    TrefBox,
    TrgrBox,
    EdtsBox,
    MdiaBox,
    ElstBox,
    MdhdBox,
    HdlrBox,
    TselBox,
    VmhdBox,
    SmhdBox,
    HmhdBox,
    NmhdBox,
    DinfBox,
    DrefBox,
    Url_Box,
    Urn_Box,
    StblBox,
    StdpBox,
    SttsBox,
    CttsBox,
    CslgBox,
    StscBox,
    StszBox,
    Stz2Box,
    StcoBox,
    PrftBox,
    Co64Box,
    StssBox,
    StshBox,
    PadbBox,
    SdtpBox,
    SbgpBox,
    SgpdBox,
    SubsBox,
    SaizBox,
    SaioBox,
    UdtaBox,
    MvexBox,
    MehdBox,
    TrexBox,
    LevaBox,
    MoofBox,
    MfhdBox,
    TrafBox,
    TfhdBox,
    TrunBox,
    TfdtBox,
    MfraBox,
    TfraBox,
    MfroBox,
    MdatBox,
    FreeBox,
    SkipBox,
    CprtBox,
    Xml_Box,
)
from .non_iso import (
    Ac_3Box,
    Avc1Box,
    AvccBox,
    BtrtBox,
    Dac3Box,
    DataBox,
    Dec3Box,
    Ec_3Box,
    EsdsBox,
    Hvc1Box,
    HvccBox,
    IlstBox,
    Mp4aBox,
    PaspBox,
    SencBox,
    PsshBox,
    UndefinedBox,
)


def build_box(fp, parent) -> Mp4Box:
    header = Header(fp)
    box = None
    box_type = header.type.replace(" ", "_").replace("-", "_").lower()
    # 这里不太想用自动构建，毕竟项目是有限的
    isoboxdata = {
        "ftyp": FtypBox,
        "pdin": PdinBox,
        "moov": MoovBox,
        "mvhd": MvhdBox,
        "meta": MetaBox,
        "trak": TrakBox,
        "tkhd": TkhdBox,
        "tref": TrefBox,
        "trgr": TrgrBox,
        "edts": EdtsBox,
        "elst": ElstBox,
        "mdia": MdiaBox,
        "mdhd": MdhdBox,
        "hdlr": HdlrBox,
        "elng": ElngBox,
        "minf": MinfBox,
        "vmhd": VmhdBox,
        "smhd": SmhdBox,
        "hmhd": HmhdBox,
        "nmhd": NmhdBox,
        "dinf": DinfBox,
        "dref": DrefBox,
        "url ": Url_Box,
        "urn ": Urn_Box,
        "stbl": StblBox,
        "stsd": StdpBox,
        "stts": SttsBox,
        "ctts": CttsBox,
        "cslg": CslgBox,
        "stsc": StscBox,
        "stsz": StszBox,
        "stz2": Stz2Box,
        "stco": StcoBox,
        "co64": Co64Box,
        "stss": StssBox,
        "stsh": StshBox,
        "padb": PadbBox,
        "stdp": StdpBox,
        "sdtp": SdtpBox,
        "sbgp": SbgpBox,
        "sgpd": SgpdBox,
        "subs": SubsBox,
        "saiz": SaizBox,
        "saio": SaioBox,
        "udta": UdtaBox,
        "mvex": MvexBox,
        "mehd": MehdBox,
        "trex": TrexBox,
        "leva": LevaBox,
        "moof": MoofBox,
        "mfhd": MfhdBox,
        "traf": TrafBox,
        "tfhd": TfhdBox,
        "trun": TrunBox,
        "tfdt": TfdtBox,
        "mfra": MfraBox,
        "tfra": TfraBox,
        "mfro": MfroBox,
        "mdat": MdatBox,
        "free": FreeBox,
        "skip": SkipBox,
        "cprt": CprtBox,
        "tsel": TselBox,
        "strk": StrkBox,
        "stri": StriBox,
        "strd": StrdBox,
        "iloc": IlocBox,
        "ipro": IproBox,
        "rinf": RinfBox,
        "sinf": SinfBox,
        "frma": FrmaBox,
        "schm": SchmBox,
        "xml ": Xml_Box,
        "pitm": PitmBox,
        "iref": IrefBox,
        "meco": MecoBox,
        "mere": MereBox,
        "styp": StypBox,
        "sidx": SidxBox,
        "ssix": SsixBox,
        "prft": PrftBox,
    }
    nisoboxdata = {
        "avc1": Avc1Box,
        "hvc1": Hvc1Box,
        "avcC": AvccBox,
        "hvcC": HvccBox,
        "btrt": BtrtBox,
        "pasp": PaspBox,
        "mp4a": Mp4aBox,
        "ac-3": Ac_3Box,
        "ec-3": Ec_3Box,
        "esds": EsdsBox,
        "dac3": Dac3Box,
        "dec3": Dec3Box,
        "ilst": IlstBox,
        "data": DataBox,
        "pssh": PsshBox,
        "senc": SencBox,
    }

    if isoboxdata.get(box_type):
        box = isoboxdata[box_type](fp, header, parent)
    elif nisoboxdata.get(box_type):
        box = nisoboxdata[box_type](fp, header, parent)
    else:
        box = UndefinedBox(fp, header, parent)
    return box
